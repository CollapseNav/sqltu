/*markdown
建表是个比较复杂的东西, 所以单独列出来写
*/

/*markdown
建表的语句为    
```sql
create table {不重复的表名称}
-- 注意是小括号
(
    {字段名称1} {字段类型} {其他附加属性},
    {字段名称2} {字段类型} {其他附加属性},
    {字段名称3} {字段类型} {其他附加属性},
    {字段名称4} {字段类型} {其他附加属性}
)
```
*/

/*markdown
字段名称可以随便起, 但是有些名称可能会和数据库保留关键字冲突, 比如 **use,key,int** 之类的

如果碰到这样的情况, 可以使用 `` 符号将字段名称包裹起来, \`use\`就是可以最常使用的
*/

/*markdown
字段名称之后紧跟着数据类型, 不同的数据库可能会有不同的数据类型, 各个数据库中的数据类型多多少少都会有点区别

这里用 **mysql** 举例一些**比较常用**的数据类型

| 类型         | 占用空间  | 简述      | 示例                | 一些特点                                                                     |
| ------------ | --------- | --------- | ------------------- | ---------------------------------------------------------------------------- |
| INT          | 4         | 整数      | 1,2,3,4             | 一般的整数,适合用来计数什么的                                                |
| TINYINT      | 1         | 短整数    | 1,2,3,4             | 可用的取值范围比 `INT` 小,可用作系统的分类标记,不超过一百种都可以用          |
| BIGINT       | 8         | 长整数    | 1,2,3,4             | 更大的整数,一般用作主键,存**雪花id**                                         |
| DOUBLE       | 8         | 浮点数    | 3.14159             | 其实就是小数,可用存储一些对精度要求不太高的数据                              |
| FLOAT        | 4         | 浮点数    | 3.14159             | 也是小数,但是范围比 `DOUBLE` 小                                              |
| DECIMAL(M,D) | M+2       | 小数值    | 3.14159             | M为总位数,D为小数位数,用于存金额等高精度要求的值,示例的类型为 `DECIMAL(6,5)` |
| BOOL         | 1         | 布尔值    | true/false          | 理论上只能存 true 或 false, 例如真假之类的二元值, 但实际范围和 TINYINT 一样  |
| DATE         | 3         | 日期      | 2022-01-01          | 只能存放日期,最小到 **日**                                                   |
| TIME         | 3         | 时间      | 18:00:00            | 只能存放时间,最小到秒                                                        |
| DATETIME     | 8         | 日期+时间 | 2022-01-01 18:00:00 | 混合日期和时间                                                               |
| VARCHAR(n)   | 最大为n   | 字符串    | 下班赶紧溜          | 可能是使用最多的类型,几乎什么都能存                                          |
| TEXT         | 最大65535 | 文本      | 下班赶紧溜          | 用于存储长文本                                                               |

以上是一些比较常用的类型,除此之外还有其他数据类型,在此就不一一举例了,后面自己去查查了解一下就行
*/

/*markdown
字段的名称和类型是必填项,接下来介绍一下可选的 `其他附加数据`,可以更加详细地配置字段的表现

| 属性            | 简述   | 作用                                               |
| --------------- | ------ | -------------------------------------------------- |
| PRIMARY KEY     | 主键   | 标记为主键列,作为唯一标识                          |
| NULL            | 可空   | 字段可为空,可以不填充值                            |
| NOT NULL        | 不可空 | 字段不可为空,必填项                                |
| DEFAULT {VALUE} | 默认值 | {VALUE}为这个字段在不填值时的默认值                |
| AUTO_INCREMENT  | 自增   | 创建数据时自动增长,只对整数类型有效,不可手动填充值 |
| COMMENT         | 注释   | 描述字段含义,给一些连接数据库的客户端展示          |
| UNIQUE KEY      | 唯一   | 标记为唯一列,只能插入不重复的值                    |
*/

CREATE TABLE newtable
(
    -- INT 类型的主键, 并且自增
    id INT PRIMARY KEY AUTO_INCREMENT,
    -- 最大20长度的字符串,并且非空必填不能重复
    name VARCHAR(20) NOT NULL UNIQUE KEY,
    -- 短整数类型,默认可为空并且由注释
    age TINYINT COMMENT '人的年龄有限,可以使用短整数',
    -- 日期类型,可为空
    birthday DATE,
    gender TINYINT DEFAULT 0 COMMENT '0 未设置,1 男,2 女',
    -- 高精度类型,总长度18,小数点之前14位,小数点后4位,默认值为0
    money DECIMAL(18,4) DEFAULT 0 COMMENT '默认财产数额为0'
)

/*markdown
建完表之后查看一下表的描述
*/

DESC newtable

/*markdown
然后给这个新的表添加数据

添加语句的基本格式为

```sql
INSERT INTO {表名称}({字段1},{字段2},{字段3}......) VALUE({值1},{值2},{值3}......)
```

值的顺序需要和字段的顺序保持一致,并且数量也要一致

如果需要一次性添加多个值

```sql
INSERT INTO {表名称}({字段1},{字段2},{字段3}......) VALUES({值1},{值2},{值3}......),({值1},{值2},{值3}......),({值1},{值2},{值3}......)
```

*/

INSERT INTO newtable(name,age,birthday,gender,money) VALUE('123',123,'2022-01-01',1,233.233);
SELECT * FROM newtable

/*markdown
执行以上语句即可添加一行数据

但如果不做修改再次执行上方的 INSERT 插入语句, 则会出现报错, 因为name被标记为唯一列, 而数据库中已经有一行 `name=123` 的数据存在, 所以会导致插入失败

这时只要将 `123` 改为其他值即可
*/

INSERT INTO newtable(name,age,birthday,gender,money) VALUE('123333',123,'2022-01-01',1,233.233);
SELECT * FROM newtable

/*markdown
接下来我们试试默认值

由于除了 name 字段不可为空,其他都可为空,所以这次只填 name
*/

INSERT INTO newtable(name) VALUE('1233334444');
SELECT * FROM newtable

/*markdown
新的数据中name为手动填充的值, gender 和 money 为建表时设置的默认值

不用了可以将表移除掉
*/

drop table newtable

/*markdown
上面只是建表的入门操作,更加详细的最好依靠搜索引擎自行查找学习
*/